{"version":3,"sources":["components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","constants/weather.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","App.js","serviceWorker.js","index.js"],"names":["Location","city","className","WeatherExtraInfo","humidity","wind","icons","WeatherTemperature","temperature","weatherState","icon","name","size","getWeatherIcon","WeatherData","data","WeatherLocation","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAceA,G,KAVE,SAAC,GAAD,IAAEC,EAAF,EAAEA,KAAF,OACb,yBAAKC,UAAU,gBACX,4BAAKD,MCWEE,G,KAbU,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAUC,EAAZ,EAAYA,KAAZ,OACrB,yBAAKH,UAAU,wBACX,0BAAMA,UAAU,iBAAhB,mBAA6CE,EAA7C,UACA,0BAAMF,UAAU,iBAAhB,mBAA6CG,EAA7C,S,uBCOFC,GAAK,mBCdU,QDeR,SADF,cCZW,SDcR,UAFH,cCVQ,YDaR,aAHA,cCRS,ODYR,QAJD,cCNS,ODWR,QALD,cCJU,QDUR,SANF,GAoCIC,EAhBY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACvB,yBAAKP,UAAU,0BAZI,SAAAO,GACnB,IAAMC,EAAOJ,EAAMG,GAInB,OAAGC,EACQ,kBAAC,IAAD,CAAcR,UAAU,QAAQS,KAAMD,EAAME,KAHtC,OAKN,kBAAC,IAAD,CAAcV,UAAU,QAAQS,KAAM,YAAaC,KAL7C,OAWTC,CAAeJ,GAEnB,0BAAMP,UAAU,eAAhB,UAAkCM,IAClC,0BAAMN,UAAU,mBAAhB,WEVOY,EAtBK,SAAC,GAAD,QAAEC,KAAOP,EAAT,EAASA,YAAaH,EAAtB,EAAsBA,KAAMI,EAA5B,EAA4BA,aAAcL,EAA1C,EAA0CA,SAA1C,OAChB,yBAAKF,UAAU,mBACX,kBAAC,EAAD,CACKM,YAAaA,EACbC,aAAcA,IAEnB,kBAAC,EAAD,CACIL,SAAUA,EACVC,KAAMA,MCPZU,EAAO,CACTP,YAAa,EACbC,aFPe,YEQfL,SAAU,GACVC,KAAM,YAUKW,EAPS,kBACpB,yBAAKd,UAAU,uBACX,kBAAC,EAAD,CAAUD,KAAM,cAChB,kBAAC,EAAD,CAAac,KAAMA,MCLZE,G,6KARV,OACC,yBAAKf,UAAU,OACb,kBAAC,EAAD,W,GAJUgB,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.18a4a602.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nconst Location = ({city}) => (\r\n    <div className=\"locationCont\"> \r\n        <h1>{city}</h1>\r\n    </div>\r\n);\r\n\r\nLocation.propTypes = {\r\n    city: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Location","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css'\r\n\r\nconst WeatherExtraInfo = ({humidity, wind}) => (\r\n    <div className=\"weatherExtraInfoCont\">\r\n        <span className=\"extraInfoText\">{`Humedad: ${humidity} % - `}</span>\r\n        <span className=\"extraInfoText\">{`Vientos: ${wind} `}</span>\r\n    </div>\r\n\r\n);\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string,\r\n}\r\n\r\nexport default WeatherExtraInfo;","import React from 'react';\r\nimport WeatherIcons from 'react-weathericons';\r\nimport PropTypes from 'prop-types';\r\nimport './styles.css';\r\n\r\nimport{\r\n    CLOUD,\r\n    CLOUDY,\r\n    SUN,\r\n    RAIN,\r\n    SNOW,\r\n    WINDY,\r\n} from './../../../constants/weather';\r\n\r\nconst icons = {\r\n    [CLOUD]: \"cloud\",\r\n    [CLOUDY]: \"cloudy\",\r\n    [SUN]: \"day-sunny\",\r\n    [RAIN]: \"rain\",\r\n    [SNOW]: \"snow\",\r\n    [WINDY]: \"windy\",\r\n}\r\n\r\nconst getWeatherIcon = weatherState => {\r\n    const icon = icons[weatherState];\r\n\r\n    const sizeicon = \"4x\";\r\n\r\n    if(icon)\r\n        return <WeatherIcons className=\"wicon\" name={icon} size={sizeicon}/>;\r\n    else \r\n        return <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeicon}/>;     \r\n}\r\n\r\nconst WeatherTemperature = ({temperature, weatherState}) => (\r\n    <div className=\"weatherTemperatureCont\">\r\n        {\r\n            getWeatherIcon(weatherState)\r\n        }        \r\n        <span className=\"temperature\">{`${temperature}`}</span>\r\n        <span className=\"temperatureType\">{`CÂ°`}</span>\r\n    </div>\r\n\r\n);\r\n\r\nWeatherTemperature.propTypes = {\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default WeatherTemperature;","export const CLOUD = \"cloud\";\r\n\r\nexport const CLOUDY = \"cloudy\";\r\n\r\nexport const SUN = \"day-sunny\";\r\n\r\nexport const RAIN = \"rain\";\r\n\r\nexport const SNOW = \"snow\";\r\n\r\nexport const WINDY = \"windy\";","import React from 'react';\r\nimport WeatherExtraInfo from './WeatherExtraInfo';\r\nimport WeatherTemperature from '../WeatherData/WeatherTemperature';\r\nimport './styles.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\n\r\nconst WeatherData = ({data: {temperature, wind, weatherState, humidity}}) => (\r\n    <div className=\"weatherDataCont\"> \r\n        <WeatherTemperature\r\n             temperature={temperature} \r\n             weatherState={weatherState}\r\n        />\r\n        <WeatherExtraInfo \r\n            humidity={humidity}\r\n            wind={wind}\r\n        />\r\n    </div>\r\n);\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n     }),\r\n};\r\n\r\nexport default WeatherData","import React from 'react';\r\nimport Location from './Location';\r\nimport WeatherData from './WeatherData';\r\nimport './styles.css';\r\n\r\nimport{\r\n   SUN,\r\n} from '../../constants/weather';\r\n\r\nconst data = {\r\n    temperature: 5,\r\n    weatherState: SUN,\r\n    humidity: 10,\r\n    wind: \"20 m/seg\",\r\n}\r\n\r\nconst WeatherLocation = () => (\r\n    <div className=\"weatherLocationCont\">\r\n        <Location city={\"Manizales\"}></Location>\r\n        <WeatherData data={data}></WeatherData>\r\n    </div>\r\n);\r\n\r\nexport default WeatherLocation\r\n","import React, { Component } from 'react';\nimport WeatherLocation from './components/WeatherLocation/index';\nimport './App.css';\n\nclass App extends Component  {\n  render() {\n     return (\n      <div className=\"App\">\n        <WeatherLocation/>\n     </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}